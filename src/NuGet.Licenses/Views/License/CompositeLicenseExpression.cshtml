@model NuGet.Licenses.Models.CompositeLicenseExpressionViewModel
@using NuGet.Licenses.Models

@functions {
    static string GetRunSpecificClass(CompositeLicenseExpressionRunType runType)
    {
        return runType == CompositeLicenseExpressionRunType.Operator ? "operator" : "";
    }

    static bool IsLicenseOrException(CompositeLicenseExpressionRun run)
    {
        return run.Type == CompositeLicenseExpressionRunType.LicenseIdentifier || run.Type == CompositeLicenseExpressionRunType.ExceptionIdentifier;
    }
}

@* The following two helpers must be on a single line each so no extra whitespace is introduced in the expression when rendered. *@

@helper MakeLink(CompositeLicenseExpressionRun run) {<a href="@run.Value" class="@GetRunSpecificClass(run.Type)">@run.Value</a>}
@helper MakeSpan(CompositeLicenseExpressionRun run) {<span class="@GetRunSpecificClass(run.Type)">@run.Value</span>}

<p>
    Composite license expression:
</p>

<div id="license-expression">
    @foreach (var run in Model.Runs)
    {
        if (IsLicenseOrException(run))
        {
            @MakeLink(run);
        }
        else
        {
            @MakeSpan(run);
        }
    }
</div>